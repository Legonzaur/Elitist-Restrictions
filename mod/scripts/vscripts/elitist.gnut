global function Elitist_Init

struct {
    float counterMultiplier //defines speed at which counter is added or removed
    float speedFetchInterval //seconds
    float graceTime = 2
    float acceptedSpeed = 260 // 260 is running speed
    bool KillSlowPlayersEnabled
    bool DamageSlowPlayersEnabled
    bool BarCounterEnabled
    bool TextCounterEnabled
    bool BurnMeterCounterEnabled
} file

array<entity> playerHasElitist

void function Elitist_Init() {
    file.speedFetchInterval = 0.1
    file.counterMultiplier = 0.02
    file.graceTime = 2
    file.acceptedSpeed = 260
    file.KillSlowPlayersEnabled = (GetConVarInt("kill_slow_players") == 1)
    file.DamageSlowPlayersEnabled = (GetConVarInt("damage_slow_players") == 1)
    file.BarCounterEnabled = (GetConVarInt("bar_speedgauge_counter") == 1)
    file.TextCounterEnabled = (GetConVarInt("text_speedgauge_counter") == 1)
    file.BurnMeterCounterEnabled = (GetConVarInt("burnmeter_speedgauge_counter") == 1)

    if(file.KillSlowPlayersEnabled || file.DamageSlowPlayersEnabled){
        AddCallback_OnPlayerRespawned( TrackPlayerSpeed )
        AddClientCommandCallback( "NotifyClientPresence", ElitistHasClient )
    }

    if(file.BurnMeterCounterEnabled){
        // Hack to set PlaylistvarOverride from https://discord.com/channels/920776187884732556/922663696273125387/947993350152290384
        try{
            SetPlaylistVarOverride("earn_meter_pilot_multiplier", "0")
        }catch(error){
            print("[ELITIST] Tried to set playlist var earn_meter_pilot_multiplier to 0")
        }
        Riff_ForceTitanAvailability( eTitanAvailability.Never )
        Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
    }

    if(GetCurrentPlaylistVarInt("accepted_speed", 0) > 0)
        file.acceptedSpeed = GetCurrentPlaylistVarFloat("accepted_speed", 0)
    if(GetCurrentPlaylistVarInt("speedgauge_multiplier", 0) > 0)
        file.counterMultiplier *= GetCurrentPlaylistVarFloat("speedgauge_multiplier", 0)

}

bool function ElitistHasClient(entity player, array<string> args){
    print("[Elitist] recieved HasClient")
    playerHasElitist.append(player)
    return true
}

void function TrackPlayerSpeed(entity player) {
    print("killslowplayers" + file.KillSlowPlayersEnabled)
    thread TrackPlayerSpeed_Threaded(player)
}

void function TrackPlayerSpeed_Threaded(entity player){
    bool sendTextMessages = true
    wait 2
    wait file.graceTime

    float counter = 1
    while(true){
        player.EndSignal( "OnDestroy" )
	    player.EndSignal( "OnDeath" )
        Assert( IsValid( player ) )

        if(GetGameState() == eGameState.WinnerDetermined) return
        if(! IsValid(player)) return
        if(!player.IsPhaseShifted()){
            vector velocity = player.GetVelocity()
            float playerVel = sqrt(velocity.x * velocity.x + velocity.y * velocity.y) // Keep only horizontal velocity
            counter -= ((file.acceptedSpeed - playerVel)*file.counterMultiplier)*(file.speedFetchInterval*0.1)

            if(counter > 1){
                counter = 1
            }else if(counter <= 0){
                counter = 0
                if(file.KillSlowPlayersEnabled){
                    //SendHudMessage( player, "You died because you were too slow", -1, 0.5, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
                    player.TakeDamage( player.GetHealth(), player, player, { damageSourceId = eDamageSourceId.mind_crime } )
                    return;
                }
                else if(file.DamageSlowPlayersEnabled){
                    //eDamageSourceId.mp_extreme_environment
                    player.TakeDamage( 5, player, player, { damageSourceId = eDamageSourceId.mind_crime } )
                }
            }
            ServerToClientStringCommand(player, "SetSpeedGauge " + counter)
            if(!playerHasElitist.contains(player)){
                printCounter(player, counter, file.speedFetchInterval)
            }
        }
        wait 0
    }
    OnThreadEnd( function() : (){
        print( "onend" )
    })
}

void function printCounter(entity player, float counter, float duration){

    if(file.BarCounterEnabled){
        string message = ""
        for(int i=0; i<counter*20; i++){
            message += "#"
        }
        SendHudMessage( player, message, -1, 0.9, 192, 192, 192, 255, 0, duration*2, 0 )
    }else if(file.TextCounterEnabled){
    //Oh god my fingers hurts when writing this (how tf do I keep integer part only)
        SendHudMessage( player, ((counter*100)-((counter*100)%1))+"%", -1, 0.8, 192, 192, 192, 255, 0, duration*2, 0 )
    }
    if(file.BurnMeterCounterEnabled){
        player.SetPlayerNetFloat( EARNMETER_EARNEDFRAC, counter )
    }
}